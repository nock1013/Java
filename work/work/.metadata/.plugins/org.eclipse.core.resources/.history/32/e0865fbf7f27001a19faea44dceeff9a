JDBC
=> java로 DBMS연동하는 기술(SQL문을 자바로 만든 시스템을 통해 실행할 수 있도록 만들어진 자바의 기술)

[[JDBC API 사용전 처리 순서]]
 1. jdbc드라이버를 제조사홈페이지에서 다운로드 받는다.
  => C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib 폴더에 있는 ojdbc6.jar파일 
 
 2. JVM이 인식할 수 있는 위치에 연결
    1) 이클립스를 사용하는 경우(Application)
       ① 작업 중인 프로젝트 선택
       ② 프로젝트에서 단축메뉴 선택 -> [Build path]-[Configure Build path]
       ③ 대화상자에서 세 번째 탭인 [Libraries]탭 선택
       ④ [Add External jar....]선택하고 1번 위치에 있는 ojdbc6.jar파일을 등록
  
[[JDBC API사용하기]]    
 1. 오라클 드라이버 로딩
   =>  JVM에서 드라이버내의 api를 접근해서 사용할 수 있도록 Class클래스의 forName메소드를 이용해서 핵심클래스를 로딩하는 작업
   
   [문법]
   Class.forName("DBMS드라이버의 핵심클래스명")
   				-------------------------
   				   |_ 패키지명까지 명시
   				   
   - 오라클 : oracle.jdbc.driver.OracleDriver
   - MySQL : com.mysql.jdbc.Driver
   
 2. DBMS에 연결하기
    => DriverManager클래스의 getConnection메소드를 통해 작업
    1) static메소드이므로 클래스이름으로 액세스
    2) throws SQLException하고 있고 SQLException은 RuntimeException의
	     하위가 아니므로 try - catch를 이용해서 exception에 대한 처리를 해야 한다.
	3) 매개변수
	   url: DBMS내부에서 인식할 연결문자열 (어떤 DBMS를 쓰냐에 따라 달라진다.)
	   
	   		[오라클]
	   		jdbc:oracle:thin:@70.12.115.50:1521:xe
	   		----------------  -----------  ---- --
	   	오라클에서 사용하는 프로토콜    DBMS가 설치되어	port  서비스명
	   						   있는pc의 ip
	   						   
	   		ex)jdbc:oracle:thin:@127.0.0.1:1521:xe
	   							----------				   
	   						    localhost와 동일 - 로컬에 연결
	   						    
	    						    
	        [mysql]
	        
	 user : 접속계정
	 password : 접속할 계정의 패스워드
   4) 리턴타입
   	   연결정보를 java.sql.Connection타입으로 리턴
   	  DriverManager의 getConnection메소드를 이용하면 DBMS에 연결 후 연결정보를 객체로 만들어서 리턴한다.
   	   연결객체의 타입은 java.sql.Connection이지만 어떤 DBMS를 접속했냐에 따라 Connection의 하위 객체가 리턴된다.
   	   내부에서는 접속된 DBMS회사에서 제공하는 라이브러리속 Connection이 리턴되도록 다형성이 적용되어 있다.
   	   
   	   
   5) 사용방법
      Connection con
      		 = DriverManager.getConnection(url,user,password)
      		 
      => 어떤 DBMS를 쓰냐에 따라 다르게 맅ㄴ되는 Connection객체를 con이라는 참조변수를 통해 접근 할 수 있도록 할당		    
   	   
   	   
3.SQL을 실행하는 역활을 담당하는 Statement객체 생성
  Statement                   : 정적 SQL을 실행
         					     보안에 취약 - SQLInjection에 취약					     
	^  
    |
 PreparedStatment            : 동적SQL을 실행
 							     시큐어코딩에 적합	     
 							     
    ^
    |
 CallableStatement            : 각 DBMS에 특화된 SQL을 실행
 		                       ex)오라클 - PL_SQL
   	  
   	   
   
 1) Statement객체를 이용
    Connection객체에 있는 createStatement메소드를 통해 생성
    Connection정보를 유지해야 한다.
    Statement stmt = con.createStatment()
    --------
        java.sql.Statement타입이지만
              드라이버 파일에 포합된 Statement객체가 리턴
              
 2) PreparedStatment객체를 이용   	 
	 
	 
	 
	        	
	   
	   
	   						    
	   						   
	   						   
	   						   
	   						   
	   						   
	   	
	   		
	   		  